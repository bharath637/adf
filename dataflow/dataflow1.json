{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "employee",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "department",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "department_copy1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "window1"
				},
				{
					"name": "filter1",
					"description": "Add expression for the filter"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Start_date as string",
				"}",
				"source(output(",
				"          emp_id as string,",
				"          emp_name as string,",
				"          dept_id as string,",
				"          salary as integer,",
				"          credit_date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          dept_id as string,",
				"          dept_name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source1, source2 join(source1@dept_id == source2@dept_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 aggregate(groupBy(emp_id,",
				"          credit_date,",
				"          salary),",
				"     sumsalary = sum(salary)) ~> aggregate1",
				"aggregate1 window(over(emp_id),",
				"     asc(credit_date, true),",
				"     runningtotal = sum(salary)) ~> window1",
				"window1 filter(credit_date > $Start_date) ~> filter1",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          dept_id as string,",
				"          dept_name as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1) ~> sink1"
			]
		}
	}
}